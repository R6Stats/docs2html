swagger: '2.0'
info:
  title: R6Stats API
  version: 0.1.0
  description: 'R6Stats API Documentation'
  contact:
    name: R6Stats Support
    url: https://r6stats.com
    email: support@r6stats.com
produces:
  - 'application/json'
consumes:
  - 'application/json'
schemes:
  - https
host: api.r6stats.com
basePath: /api/v1
paths:
  /users/authenticate:
    post:
      summary: 'Authenticate a user with a login and password'
      description: 'Provided with a *login* (email or username) and a *password*, will return a JWT Payload along with User information.'
      tags:
        - Authentication
      parameters:
        - name: body
          in: body
          required: true
          description: 'The payload required to authenticate a user'
          schema:
            $ref: '#/definitions/UserAuthentication'
      responses:
        '200':
          description: successfully authenticated
          schema:
            $ref: '#/definitions/AuthenticatedPayload'
  /users/register:
    post:
      summary: 'Register a new user'
      description: 'Registers a new user with the *username*, *email*, and *password*. Will return a success status if all fields are unique and valid. JWT payload is **not** returned and a authenticate request must be made in order to sign in.'
      tags:
        - Authentication
      parameters:
        - name: body
          in: body
          required: true
          description: 'The payload required to register a new user'
          schema:
            $ref: '#/definitions/RegistrationPayload'
      responses:
        '200':
          description: successfully registered
          schema:
            $ref: '#/definitions/RegisteredPayload'
  '/database/{section}':
    get:
      summary: 'Return a list of items from the database'
      description: 'Returns the items that are tagged with the *section*. These items are general pieces of data that are found within the Rainbow Six game. Sections include: *operators*, *weapons*, and *gadgets*'
      tags:
        - Database
      parameters:
        - name: section
          in: path
          required: true
          type: string
          enum:
            - operators
            - weapons
            - gadgets
          description: 'The database category to retrieve'
      responses:
        '200':
          description: 'The category exists and items are returned'
          schema:
            properties:
              weapons:
                type: array
                items:
                  $ref: '#/definitions/DatabaseItem'
  '/users/favorites/{ubisoft_id}':
    put:
      tags:
        - Favorites
      summary: >-
        Add a player to the currently logged in user's favorites
      description: >-
        Adds a player to the currently logged in user's list of favorites. The player's Ubisoft ID is used to identify players for favoriting. The ID can be retrieved from any request that returns a PlayerItem.
      parameters:
        - name: ubisoft_id
          in: path
          required: true
          type: string
          description: 'The Ubisoft ID of the player to add'
      responses:
        '200':
          description: 'The player was successfully added to the favorites'
          schema:
            properties:
              status:
                type: string
                description: 'Describes whether or not favorite was added'
    delete:
      summary: >-
        Removes a player from the currently logged in user's favorites
      description: >-
        Removes the player with the *ubisoft_id* from the currently logged in user's favorites.
      tags:
        - Favorites
      parameters:
        - name: ubisoft_id
          in: path
          required: true
          type: string
          description: 'The Ubisoft ID of the player to remove'
      responses:
        '200':
          description: 'A user was successfully removed from the favorites'
          schema:
            properties:
              status:
                type: string
                description: 'Describes whether or not favorite was removed'
  '/users/favorites':
    get:
      summary: >-
        Get a list of the currently logged in user's favorites
      tags:
        - Favorites
      description: >-
        Retrieves a list of favorites for the currently logged in user. The list of players is returned as an array of *PlayerItem*
      responses:
        '200':
          description: 'The user is logged in and favorites are returned'
          schema:
            properties:
              players:
                type: array
                items:
                  $ref: '#/definitions/PlayerItem'
  '/leaderboards/{leaderboard}':
    get:
      summary: 'Get a list of players sorted with the specified parameters'
      description: >-
        Queries the leaderboards based on the set of parameters provided.


        The specific leaderboard must be specified and may be **casual**, **ranked**, or **general**. This will set the primary category, and then the sorting can be further narrowed by using the sort query param.


        The direction that the parameter is sorted can be set with the *sort* query parameter.


        If specified, only players from the *platform* parameter will be included in the leaderboards. Platforms are **xone** *(Xbox One)*, **ps4** *(Playstation 4)*, and **uplay** *(Uplay, Steam, PC)*. *all* may also be specified for semantic purposes.



          | Leaderboard | Parameters |
          |------ | ------ |
          |Casual | kills, deaths, wins, losses, playtime |
          |Ranked | kills, deaths, wins, losses, playtime |
          |General | revives, suicides, barricades, reinforcements, melee_kills, penetration_kills, bullets_fired, bullets_hit, headshots, assists, steps, experience, level |
      tags:
        - Leaderboards
      parameters:
        - name: leaderboard
          in: path
          type: string
          description: 'The primary category to sort stats by. If ranked is used, only players that have participated in a ranked match will be included in the response'
          enum:
            - casual
            - ranked
            - general
          required: true
        - name: platform
          in: query
          type: string
          default: 'all'
          description: 'The platform that the response will be limited to. Use xone, ps4, uplay, or all.'
          enum:
            - xone
            - ps4
            - uplay
            - all
        - name: sort
          in: query
          type: string
          description: 'The specified field to sort the returned users by.'
        - name: dir
          in: query
          type: string
          description: 'The direction to sort the sub category by. Either asc for ascending or desc for descending.'
          enum:
            - desc
            - asc
        - name: page
          in: query
          type: integer
          description: 'The page number to request. Requesting an invalid or non-existent page number will use page 1 instead.'
        - name: limit
          in: query
          type: integer
          default: 25
          minimum: 1
          maximum: 30
          description: 'The number of users to display per page'
      responses:
        '200':
          description: 'The leaderboards data is returned and sorted'
          schema:
            properties:
              players:
                type: array
                items:
                  $ref: '#/definitions/PlayerItem'
              meta:
                $ref: '#/definitions/PaginatedMeta'
  '/leaderboards/{leaderboard}/find':
    get:
      summary: 'Find a player on the leaderboards'
      description: >-
        Search for a player on the leaderboards and returns the page as an array of *PlayerItem*s, similar to how the leaderboards data is returned.
      tags:
        - Leaderboards
      parameters:
        - name: leaderboard
          in: path
          type: string
          description: 'The primary category to sort stats by. If ranked is used, only players that have participated in a ranked match will be included in the response'
          enum:
            - casual
            - ranked
            - general
          required: true
        - name: platform
          in: query
          type: string
          default: 'all'
          description: 'The platform that the response will be limited to. Use xone, ps4, uplay, or all.'
          enum:
            - xone
            - ps4
            - uplay
            - all
        - name: player_platform
          in: query
          type: string
          description: 'The platform that the player exists on. This is separate from the *platform* parameter due to the possibility that the platform parameter is not necessary, and allows for *all* platforms to be queried.'
          required: true
          enum:
            - xone
            - ps4
            - uplay
        - name: sort
          in: query
          type: string
          description: 'The specified field to sort the returned users by.'
        - name: dir
          in: query
          type: string
          description: 'The direction to sort the sub category by. Either asc for ascending or desc for descending.'
          enum:
            - desc
            - asc
        - name: page
          in: query
          type: integer
          description: 'The page number to request. Requesting an invalid or non-existent page number will use page 1 instead.'
        - name: limit
          in: query
          type: integer
          default: 25
          minimum: 1
          maximum: 30
          description: 'The number of users to display per page'
      responses:
        '200':
          description: 'The player exists on the *leaderboard* and the page that they are located on is returned.'
          schema:
            properties:
              players:
                type: array
                items:
                  $ref: '#/definitions/PlayerItem'
              meta:
                $ref: '#/definitions/PaginatedMeta'
        '404':
          description: 'The player does not exist on the *leaderboard*. This may occur if they have not been indexed, they have not played the *gamemode*, or the parameters are not valid.'
          schema:
            properties:
              status:
                type: string
  '/users/accounts/{platform}/{username}':
    put:
      summary: >-
        Link a player's PSN/Xbox account to R6Stats
      description: >-
        If successful, the API will create a link between the currently logged in user and the account that exists on the *platform* with the *username*.


        This then needs to be verfified with the provided token to make the link official. The token can be messaged to the R6Stats user on either Playstation or Xbox via the messaging system.


        The user may then make a GET request to the same URL to check whether or not the message was received, and then the link will be complete.
      tags:
        - Linked Accounts
      parameters:
        - name: username
          in: path
          required: true
          type: string
          description: 'Username of the account to link'
        - name: platform
          in: path
          required: true
          type: string
          description: 'Platform that the account exists on'
      responses:
        '200':
          description: 'The account has been created and is awaiting verification'
          schema:
            $ref: '#/definitions/LinkedAccountStatus'
    get:
      summary: >-
        Get a list of the user's linked accounts
      description: 'Returns a list of *LinkedAccount*s'
      tags:
        - Linked Accounts
      parameters:
        - name: username
          in: path
          required: true
          type: string
          description: 'Username of the account to check'
        - name: platform
          in: path
          required: true
          type: string
          description: 'Platform that the account exists on'
      responses:
        '200':
          description: 'Account successfully verified and linked'
          schema:
            $ref: '#/definitions/LinkedAccountStatus'
        '412':
          description: 'Still awaiting verification'
          schema:
            properties:
              status:
                type: string
    delete:
      summary: >-
        Unlink a user's account from R6Stats
      description: 'Unlinks and deletes the account with the *username* on the *platform*'
      tags:
        - Linked Accounts
      parameters:
        - name: username
          in: path
          required: true
          type: string
          description: 'Username on specified platform'
        - name: platform
          in: path
          required: true
          type: string
          description: 'Platform for username'
      responses:
        '200':
          description: 'Account has been unlinked and may be reused'
          schema:
            properties:
              status:
                type: string

  /users/accounts:
    get:
      summary: >-
        Get a list of the user's linked accounts
      description: >-
        Requests a list of the currently logged in user's linked accounts. Will return an empty array if no accounts have been linked.
      tags:
        - Linked Accounts
      responses:
        '200':
          description: 'List of linked accounts is returned'
          schema:
            properties:
              linked_accounts:
                type: array
                items:
                  $ref: '#/definitions/LinkedAccount'
  '/players/{username}':
    get:
      summary: 'Get stats and info for a Rainbow Six player'
      description: >-
        Returns the stats for the player with the specified username that exists on the specified platform. Stats and other information is returned in the format of a PlayerItem.
      tags:
        - Players
      parameters:
        - name: username
          in: path
          required: true
          type: string
          description: 'Username of the player'
        - name: platform
          in: query
          required: true
          type: string
          description: 'Platform to lookup player on'
      responses:
        '200':
          description: 'The player exists and data is available'
          schema:
            $ref: '#/definitions/PlayerItem'
  '/players/{username}/operators':
    get:
      summary: 'Get operator stats for a Rainbow Six player'
      description: >-
        Returns a list of operator records in the form of OperatorListItem. These items include the player's stats with that operator along with the bio and other useful information about the actual operator.
      tags:
        - Players
      parameters:
        - name: username
          in: path
          required: true
          type: string
          description: 'Player username on specified platform'
        - name: platform
          in: query
          required: true
          type: string
          description: 'The platform that the player plays on'
        - name: sort
          in: query
          required: true
          type: string
          description: 'The field to sort returned operators by'
        - name: dir
          in: query
          required: true
          type: string
          description: 'The direction to sort @sort'
      responses:
        '200':
          description: 'Returns the operator stats for a player'
          schema:
            properties:
              operator_records:
                type: array
                items:
                  $ref: '#/definitions/OperatorListItem'
  '/players/{username}/seasons':
    get:
      summary: 'Get seasonal stats'
      description: >-
        Returns stats for all seasons that are currently recorded for a user. 
        
        
        If no seasons exist, the server will attempt to load the data for the latest season and will return that.
        
        
        The user may also load an older season by adding a *?season_id* parameter to the request. This will load the specified season and append it to the returned list.
      tags:
        - Players
      parameters:
        - name: username
          in: path
          required: true
          type: string
          description: 'The username of the player'
        - name: platform
          in: query
          required: true
          type: string
          description: 'The platform the player exists on'
        - name: season_id
          in: query
          required: false
          type: integer
          description: 'Specify a new season to load into the database'
      responses:
        '200':
          description: 'The list of seasons is returned, whether or not it is empty'
          schema:
            type: array
            items:
              $ref: '#/definitions/SeasonStat'
      
  '/users/{username}/profile':
    get:
      summary: 'Get profile information for a user'
      description: >-
        Returns information regarding the user with the specified username. The data returned will differ depending on the role of the user and whether or not the user requested is the same as the currently logged in user.
      tags:
        - Users
      parameters:
        - name: username
          in: path
          required: true
          type: string
          description: 'Valid and existing username '
      responses:
        '200':
          description: 'The user is valid and the profile is returned'
          schema:
            $ref: '#/definitions/AuthenticatedProfile'
definitions:
  UserAuthentication:
    properties:
      login:
        type: string
        description: 'Valid username or email'
      password:
        type: string
        description: 'Valid password for the username or email'
    required:
      - login
      - password
  AuthenticatedPayload:
    properties:
      status:
        type: string
        description: 'Status message describing whether or not login succeeded'
      payload:
        $ref: '#/definitions/JWTPayload'
  JWTPayload:
    properties:
      token:
        type: string
        description: 'JWT Tooken'
      user:
        $ref: '#/definitions/JWTUser'
  JWTUser:
    properties:
      role:
        type: string
        description: 'User role for authorization'
      id:
        type: integer
        description: 'User database ID'
      username:
        type: string
        description: 'User username'
  RegistrationPayload:
    properties:
      username:
        type: string
        description: 'Unique username for new user'
      email:
        type: string
        description: 'Unique email for new user'
      password:
        type: string
        description: 'Password for new user'
    required:
      - username
      - email
      - password
  RegisteredPayload:
    properties:
      status:
        type: string
        description: 'Status message regarding registration'
  OperatorStatItem:
    properties:
      played:
        type: integer
        description: 'Number of matches played'
      wins:
        type: integer
        description: 'Number of matches won'
      losses:
        type: integer
        description: 'Number of matches lost'
      kills:
        type: integer
        description: 'Number of players killed'
      deaths:
        type: integer
        description: 'Number of deaths with operator'
      playtime:
        type: integer
        description: 'Time played with operator in minutes'
      specials:
        type: object
        description: 'Various special abilities and their values for operators'
  OperatorItem:
    properties:
      name:
        type: string
        description: 'The name of the operator'
      ctu:
        type: string
        description: 'The shorthand name for the CTU the operator is in'
      images:
        type: object
        description: 'The figure and badge for an operator'
  OperatorListItem:
    properties:
      stats:
        $ref: '#/definitions/OperatorStatItem'
      operator:
        $ref: '#/definitions/OperatorItem'
  PlayerItem:
    properties:
      username:
        type: string
      platform:
        type: string
        description: 'Shorthand for the platform the player plays on'
      ubisoft_id:
        type: string
        description: 'The internal Ubisoft GUID for the player'
      indexed_at:
        type: string
        description: 'A timestamp for when a player was first added to the database'
      updated_at:
        type: string
        description: 'A timestamp for when a player was last updated'
      stats:
        $ref: '#/definitions/PlayerStatsItem'
  PlayerStatsItem:
    properties:
      ranked:
        $ref: '#/definitions/PlayerGamemodeSection'
      casual:
        $ref: '#/definitions/PlayerGamemodeSection'
      overall:
        $ref: '#/definitions/PlayerOverallSection'
      progression:
        $ref: '#/definitions/PlayerProgressionSection'
  PlayerGamemodeSection:
    properties:
      has_played:
        type: boolean
        description: 'Whether or not a player has played this gamemode'
      wins:
        type: integer
      losses:
        type: integer
      kills:
        type: integer
      deaths:
        type: integer
      playtime:
        type: integer
  PlayerOverallSection:
    properties:
      revives:
        type: integer
      suicides:
        type: integer
      reinforcements_deployed:
        type: integer
      barricades_built:
        type: integer
      steps_moved:
        type: integer
      bullets_fired:
        type: integer
      bullets_hit:
        type: integer
      headshots:
        type: integer
      melee_kills:
        type: integer
      penetration_kills:
        type: integer
      assists:
        type: integer
  PlayerProgressionSection:
    properties:
      level:
        type: integer
        description: 'The in game level of the player, not the ranking'
      xp:
        type: integer
        description: 'The amount of XP until the next level'
  DatabaseItem:
    properties:
      icon_url:
        type: string
        description: 'The URL for the items icon'
  SimpleUser:
    properties:
      username:
        type: string
      admin:
        type: boolean
  LinkedAccount:
    properties:
      username:
        type: string
      platform:
        type: string
      verified:
        type: boolean
      created_at:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/SimpleUser'
      player:
        $ref: '#/definitions/PlayerItem'
  AccountStatusMeta:
    properties:
      status:
        type: string
        description: 'String describing current status of account linkage'
  LinkedAccountStatus:
    properties:
      linked_account:
        $ref: '#/definitions/LinkedAccount'
      meta:
        $ref: '#/definitions/AccountStatusMeta'
  AuthenticatedProfile:
    type: object
    properties:
      username:
        type: string
      role:
        type: string
  PaginatedMeta:
    type: object
    properties:
      current_page:
        type: integer
      next_page:
        type: integer
      prev_page:
        type: integer
      total_pages:
        type: integer
      total_count:
        type: integer
  SeasonStat:
    type: object
    properties:
      wins:
        type: integer
      losses:
        type: integer
      abandons:
        type: integer
      season:
        type: integer
      region:
        type: string
      ranking:
        $ref: '#/definitions/SeasonalRankingStat'
  SeasonalRankingStat:
    type: object
    properties:
      rating:
        type: number
      next_rating:
        type: number
      prev_rating:
        type: number
      mean:
        type: number
      stdev:
        type: number
      rank:
        type: integer